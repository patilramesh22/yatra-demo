{"name": "test_search_flights_1_stop_1___Mumbai____Bangalore____15_08_2024____1_Stop__", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=114.0.5735.199); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00FAA813+48355]\n\t(No symbol) [0x00F3C4B1]\n\t(No symbol) [0x00E45358]\n\t(No symbol) [0x00E487A1]\n\t(No symbol) [0x00E499E1]\n\t(No symbol) [0x00E49A80]\n\t(No symbol) [0x00E6D2FD]\n\t(No symbol) [0x00E8A73C]\n\t(No symbol) [0x00E69A36]\n\t(No symbol) [0x00E8AA94]\n\t(No symbol) [0x00E9C922]\n\t(No symbol) [0x00E8A536]\n\t(No symbol) [0x00E682DC]\n\t(No symbol) [0x00E693DD]\n\tGetHandleVerifier [0x0120AABD+2539405]\n\tGetHandleVerifier [0x0124A78F+2800735]\n\tGetHandleVerifier [0x0124456C+2775612]\n\tGetHandleVerifier [0x010351E0+616112]\n\t(No symbol) [0x00F45F8C]\n\t(No symbol) [0x00F42328]\n\t(No symbol) [0x00F4240B]\n\t(No symbol) [0x00F34FF7]\n\tBaseThreadInitThunk [0x7765FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77CD80CE+286]\n\tRtlGetAppContainerNamedObjectPath [0x77CD809E+238]", "trace": "self = <test_scripts.test_searchflights.TestSearchAndVerifyFilter testMethod=test_search_flights_1_stop_1___Mumbai____Bangalore____15_08_2024____1_Stop__>\ndeptfrom = 'Mumbai', goingto = 'Bangalore', date = '15/08/2024', stop = '1 Stop'\n\n    @data(*Utils.get_data_from_csv(\"data/testdata.csv\"))\n    @unpack\n    def test_search_flights_1_stop(self,deptfrom,goingto,date,stop):\n>       search_flight_result = self.lp.search_flights(deptfrom,goingto,date)\n\ntest_scripts\\test_searchflights.py:21: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\yatra_launch_page.py:77: in search_flights\n    self.going_to_loc(going_to_loc)\npages\\yatra_launch_page.py:50: in going_to_loc\n    self.log.info(result.text)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:90: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000189597D2390>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CD80CE+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CD809E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=114.0.5735.199); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00FAA813+48355]\nE       \t(No symbol) [0x00F3C4B1]\nE       \t(No symbol) [0x00E45358]\nE       \t(No symbol) [0x00E487A1]\nE       \t(No symbol) [0x00E499E1]\nE       \t(No symbol) [0x00E49A80]\nE       \t(No symbol) [0x00E6D2FD]\nE       \t(No symbol) [0x00E8A73C]\nE       \t(No symbol) [0x00E69A36]\nE       \t(No symbol) [0x00E8AA94]\nE       \t(No symbol) [0x00E9C922]\nE       \t(No symbol) [0x00E8A536]\nE       \t(No symbol) [0x00E682DC]\nE       \t(No symbol) [0x00E693DD]\nE       \tGetHandleVerifier [0x0120AABD+2539405]\nE       \tGetHandleVerifier [0x0124A78F+2800735]\nE       \tGetHandleVerifier [0x0124456C+2775612]\nE       \tGetHandleVerifier [0x010351E0+616112]\nE       \t(No symbol) [0x00F45F8C]\nE       \t(No symbol) [0x00F42328]\nE       \t(No symbol) [0x00F4240B]\nE       \t(No symbol) [0x00F34FF7]\nE       \tBaseThreadInitThunk [0x7765FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CD80CE+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CD809E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "log", "source": "0f62ac00-d428-41ca-904e-7ea07f4badb7-attachment.txt", "type": "text/plain"}], "start": 1722952087319, "stop": 1722952088802, "uuid": "38695edc-ea9b-4a9b-a581-9cb773f5fa6e", "historyId": "fa28b3abbd780765be458fa309cf1495", "testCaseId": "fa28b3abbd780765be458fa309cf1495", "fullName": "test_scripts.test_searchflights.TestSearchAndVerifyFilter#test_search_flights_1_stop_1___Mumbai____Bangalore____15_08_2024____1_Stop__", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup', 'log_on_failure')"}, {"name": "parentSuite", "value": "test_scripts"}, {"name": "suite", "value": "test_searchflights"}, {"name": "subSuite", "value": "TestSearchAndVerifyFilter"}, {"name": "host", "value": "VG"}, {"name": "thread", "value": "12856-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_scripts.test_searchflights"}]}